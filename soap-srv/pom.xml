<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>countries-web-service</artifactId>
	<version>0.0.1</version>
	<name>countries-web-service</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>17</java.version>
		<docker-image-tag>${project.version}</docker-image-tag>
		<countries-service-docker-image-name>soap-countries-web-service</countries-service-docker-image-name>
		<docker-image-registry>localhost</docker-image-registry>
		<server-port>8080</server-port>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
		</dependency>
		<!-- begin::springws -->
		<dependency>
			<groupId>wsdl4j</groupId>
			<artifactId>wsdl4j</artifactId>
		</dependency>
		<!-- end::springws -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- begin::xsd -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jaxb2-maven-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>xjc</id>
						<goals>
							<goal>xjc</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<sources>
						<source>${project.basedir}/src/main/resources/countries.xsd</source>
					</sources>
				</configuration>
			</plugin>
			<!-- end::xsd -->
		</plugins>
	</build>


	<profiles>

		<profile>
			<id>prepare-docker</id>
			<activation>
				<file>
					<exists>src/main/docker</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>prepare-docker-folder</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>target/docker</outputDirectory>
									<resources>
										<resource>
											<directory>src/main/docker</directory>
											<filtering>true</filtering>
										</resource>
										<resource>
											<directory>${project.build.directory}</directory>
											<include>${project.build.finalName}.jar</include>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>package-docker-folder</id>
								<phase>package</phase>
								<configuration>
									<target>
										<zip basedir="${project.build.directory}/docker"
											 destfile="${project.build.directory}/${project.build.finalName}-docker.zip"/>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docker</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>docker-maven-plugin</artifactId>

						<configuration>
							<dockerDirectory>${project.build.directory}/docker</dockerDirectory>
							<imageName>
								${docker-image-registry}/${countries-service-docker-image-name}
							</imageName>
							<imageTags>
								<imageTag>${docker-image-tag}</imageTag>
							</imageTags>
							<rm>true</rm>
							<forceTags>true</forceTags>
						</configuration>
						<executions>
							<execution>
								<id>remove-image</id>
								<phase>clean</phase>
								<goals>
									<goal>removeImage</goal>
								</goals>
							</execution>
							<execution>
								<id>build-image</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>push-image</id>
								<phase>deploy</phase>
								<goals>
									<goal>push</goal>
								</goals>
								<configuration>
									<serverId>${docker-image-registry}</serverId>
									<registryUrl>${docker-image-registry}</registryUrl>
									<imageName>
										${docker-image-registry}/${countries-service-docker-image-name}:${docker-image-tag}
									</imageName>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
